// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRoomsFieldNames          = builder.RawFieldNames(&UserRooms{})
	userRoomsRows                = strings.Join(userRoomsFieldNames, ",")
	userRoomsRowsExpectAutoSet   = strings.Join(stringx.Remove(userRoomsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRoomsRowsWithPlaceHolder = strings.Join(stringx.Remove(userRoomsFieldNames, "`user_room_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userRoomsModel interface {
		Insert(ctx context.Context, data *UserRooms) (sql.Result, error)
		FindOne(ctx context.Context, userRoomId int64) (*UserRooms, error)
		Update(ctx context.Context, data *UserRooms) error
		Delete(ctx context.Context, userRoomId int64) error
	}

	defaultUserRoomsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserRooms struct {
		UserRoomId int64         `db:"user_room_id"`
		UserId     sql.NullInt64 `db:"user_id"`
		HomestayId sql.NullInt64 `db:"homestay_id"`
		CreatedAt  int64         `db:"created_at"`
		UpdatedAt  int64         `db:"updated_at"`
	}
)

func newUserRoomsModel(conn sqlx.SqlConn) *defaultUserRoomsModel {
	return &defaultUserRoomsModel{
		conn:  conn,
		table: "`user_rooms`",
	}
}

func (m *defaultUserRoomsModel) withSession(session sqlx.Session) *defaultUserRoomsModel {
	return &defaultUserRoomsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`user_rooms`",
	}
}

func (m *defaultUserRoomsModel) Delete(ctx context.Context, userRoomId int64) error {
	query := fmt.Sprintf("delete from %s where `user_room_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userRoomId)
	return err
}

func (m *defaultUserRoomsModel) FindOne(ctx context.Context, userRoomId int64) (*UserRooms, error) {
	query := fmt.Sprintf("select %s from %s where `user_room_id` = ? limit 1", userRoomsRows, m.table)
	var resp UserRooms
	err := m.conn.QueryRowCtx(ctx, &resp, query, userRoomId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoomsModel) Insert(ctx context.Context, data *UserRooms) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userRoomsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserRoomId, data.UserId, data.HomestayId)
	return ret, err
}

func (m *defaultUserRoomsModel) Update(ctx context.Context, data *UserRooms) error {
	query := fmt.Sprintf("update %s set %s where `user_room_id` = ?", m.table, userRoomsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.HomestayId, data.UserRoomId)
	return err
}

func (m *defaultUserRoomsModel) tableName() string {
	return m.table
}
