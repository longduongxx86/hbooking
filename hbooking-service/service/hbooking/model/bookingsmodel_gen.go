// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bookingsFieldNames          = builder.RawFieldNames(&Bookings{})
	bookingsRows                = strings.Join(bookingsFieldNames, ",")
	bookingsRowsExpectAutoSet   = strings.Join(stringx.Remove(bookingsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bookingsRowsWithPlaceHolder = strings.Join(stringx.Remove(bookingsFieldNames, "`booking_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bookingsModel interface {
		Insert(ctx context.Context, data *Bookings) (sql.Result, error)
		FindOne(ctx context.Context, bookingId int64) (*Bookings, error)
		Update(ctx context.Context, data *Bookings) error
		Delete(ctx context.Context, bookingId int64) error
	}

	defaultBookingsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Bookings struct {
		BookingId    int64           `db:"booking_id"`
		UserId       sql.NullInt64   `db:"user_id"`
		RoomId       sql.NullInt64   `db:"room_id"`
		CheckInDate  sql.NullInt64   `db:"check_in_date"`
		CheckOutDate sql.NullInt64   `db:"check_out_date"`
		DepositPrice sql.NullFloat64 `db:"deposit_price"`
		TotalPrice   sql.NullFloat64 `db:"total_price"`
		Status       int64           `db:"status"` // 1: chua thanh toan, 2: da thanh toan
		CreatedAt    int64           `db:"created_at"`
		UpdatedAt    int64           `db:"updated_at"`
	}
)

func newBookingsModel(conn sqlx.SqlConn) *defaultBookingsModel {
	return &defaultBookingsModel{
		conn:  conn,
		table: "`bookings`",
	}
}

func (m *defaultBookingsModel) withSession(session sqlx.Session) *defaultBookingsModel {
	return &defaultBookingsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`bookings`",
	}
}

func (m *defaultBookingsModel) Delete(ctx context.Context, bookingId int64) error {
	query := fmt.Sprintf("delete from %s where `booking_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, bookingId)
	return err
}

func (m *defaultBookingsModel) FindOne(ctx context.Context, bookingId int64) (*Bookings, error) {
	query := fmt.Sprintf("select %s from %s where `booking_id` = ? limit 1", bookingsRows, m.table)
	var resp Bookings
	err := m.conn.QueryRowCtx(ctx, &resp, query, bookingId)
	switch err {
	case nil:
		return &resp, nil
	default:
		return nil, err
	}
}

func (m *defaultBookingsModel) Insert(ctx context.Context, data *Bookings) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, bookingsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BookingId, data.UserId, data.RoomId, data.CheckInDate, data.CheckOutDate, data.DepositPrice, data.TotalPrice, data.Status)
	return ret, err
}

func (m *defaultBookingsModel) Update(ctx context.Context, data *Bookings) error {
	query := fmt.Sprintf("update %s set %s where `booking_id` = ?", m.table, bookingsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.RoomId, data.CheckInDate, data.CheckOutDate, data.DepositPrice, data.TotalPrice, data.Status, data.BookingId)
	return err
}

func (m *defaultBookingsModel) tableName() string {
	return m.table
}
