// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	servicesFieldNames          = builder.RawFieldNames(&Services{})
	servicesRows                = strings.Join(servicesFieldNames, ",")
	servicesRowsExpectAutoSet   = strings.Join(stringx.Remove(servicesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	servicesRowsWithPlaceHolder = strings.Join(stringx.Remove(servicesFieldNames, "`service_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	servicesModel interface {
		Insert(ctx context.Context, data *Services) (sql.Result, error)
		FindOne(ctx context.Context, serviceId int64) (*Services, error)
		Update(ctx context.Context, data *Services) error
		Delete(ctx context.Context, serviceId int64) error
	}

	defaultServicesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Services struct {
		ServiceId   int64          `db:"service_id"`
		ServiceName string         `db:"service_name"`
		Description sql.NullString `db:"description"`
		Price       float64        `db:"price"`
		CreatedAt   int64          `db:"created_at"`
		UpdatedAt   int64          `db:"updated_at"`
	}
)

func newServicesModel(conn sqlx.SqlConn) *defaultServicesModel {
	return &defaultServicesModel{
		conn:  conn,
		table: "`services`",
	}
}

func (m *defaultServicesModel) withSession(session sqlx.Session) *defaultServicesModel {
	return &defaultServicesModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`services`",
	}
}

func (m *defaultServicesModel) Delete(ctx context.Context, serviceId int64) error {
	query := fmt.Sprintf("delete from %s where `service_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, serviceId)
	return err
}

func (m *defaultServicesModel) FindOne(ctx context.Context, serviceId int64) (*Services, error) {
	query := fmt.Sprintf("select %s from %s where `service_id` = ? limit 1", servicesRows, m.table)
	var resp Services
	err := m.conn.QueryRowCtx(ctx, &resp, query, serviceId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultServicesModel) Insert(ctx context.Context, data *Services) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, servicesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ServiceId, data.ServiceName, data.Description, data.Price)
	return ret, err
}

func (m *defaultServicesModel) Update(ctx context.Context, data *Services) error {
	query := fmt.Sprintf("update %s set %s where `service_id` = ?", m.table, servicesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ServiceName, data.Description, data.Price, data.ServiceId)
	return err
}

func (m *defaultServicesModel) tableName() string {
	return m.table
}
