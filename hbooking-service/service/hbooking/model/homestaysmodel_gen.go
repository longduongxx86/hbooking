// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	homestaysFieldNames          = builder.RawFieldNames(&Homestays{})
	homestaysRows                = strings.Join(homestaysFieldNames, ",")
	homestaysRowsExpectAutoSet   = strings.Join(stringx.Remove(homestaysFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	homestaysRowsWithPlaceHolder = strings.Join(stringx.Remove(homestaysFieldNames, "`homestay_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	homestaysModel interface {
		Insert(ctx context.Context, data *Homestays) (sql.Result, error)
		FindOne(ctx context.Context, homestayId int64) (*Homestays, error)
		Update(ctx context.Context, data *Homestays) error
		Delete(ctx context.Context, homestayId int64) error
	}

	defaultHomestaysModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Homestays struct {
		HomestayId  int64          `db:"homestay_id"`
		UserId      int64          `db:"user_id"`
		Name        string         `db:"name"`
		Description sql.NullString `db:"description"`
		Ward        sql.NullInt64  `db:"ward"`
		District    sql.NullInt64  `db:"district"`
		Province    sql.NullInt64  `db:"province"`
		CreatedAt   int64          `db:"created_at"`
		UpdatedAt   int64          `db:"updated_at"`
	}
)

func newHomestaysModel(conn sqlx.SqlConn) *defaultHomestaysModel {
	return &defaultHomestaysModel{
		conn:  conn,
		table: "`homestays`",
	}
}

func (m *defaultHomestaysModel) withSession(session sqlx.Session) *defaultHomestaysModel {
	return &defaultHomestaysModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`homestays`",
	}
}

func (m *defaultHomestaysModel) Delete(ctx context.Context, homestayId int64) error {
	query := fmt.Sprintf("delete from %s where `homestay_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, homestayId)
	return err
}

func (m *defaultHomestaysModel) FindOne(ctx context.Context, homestayId int64) (*Homestays, error) {
	query := fmt.Sprintf("select %s from %s where `homestay_id` = ? limit 1", homestaysRows, m.table)
	var resp Homestays
	err := m.conn.QueryRowCtx(ctx, &resp, query, homestayId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHomestaysModel) Insert(ctx context.Context, data *Homestays) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, homestaysRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HomestayId, data.UserId, data.Name, data.Description, data.Ward, data.District, data.Province)
	return ret, err
}

func (m *defaultHomestaysModel) Update(ctx context.Context, data *Homestays) error {
	query := fmt.Sprintf("update %s set %s where `homestay_id` = ?", m.table, homestaysRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Description, data.Ward, data.District, data.Province, data.HomestayId)
	return err
}

func (m *defaultHomestaysModel) tableName() string {
	return m.table
}
