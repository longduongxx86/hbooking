// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	reviewsFieldNames          = builder.RawFieldNames(&Reviews{})
	reviewsRows                = strings.Join(reviewsFieldNames, ",")
	reviewsRowsExpectAutoSet   = strings.Join(stringx.Remove(reviewsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	reviewsRowsWithPlaceHolder = strings.Join(stringx.Remove(reviewsFieldNames, "`review_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	reviewsModel interface {
		Insert(ctx context.Context, data *Reviews) (sql.Result, error)
		FindOne(ctx context.Context, reviewId int64) (*Reviews, error)
		Update(ctx context.Context, data *Reviews) error
		Delete(ctx context.Context, reviewId int64) error
	}

	defaultReviewsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Reviews struct {
		ReviewId   int64          `db:"review_id"`
		UserId     sql.NullInt64  `db:"user_id"`
		HomestayId sql.NullInt64  `db:"homestay_id"`
		Rate       sql.NullInt64  `db:"rate"`
		Comment    sql.NullString `db:"comment"`
		CreatedAt  int64          `db:"created_at"`
		UpdatedAt  int64          `db:"updated_at"`
	}
)

func newReviewsModel(conn sqlx.SqlConn) *defaultReviewsModel {
	return &defaultReviewsModel{
		conn:  conn,
		table: "`reviews`",
	}
}

func (m *defaultReviewsModel) withSession(session sqlx.Session) *defaultReviewsModel {
	return &defaultReviewsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`reviews`",
	}
}

func (m *defaultReviewsModel) Delete(ctx context.Context, reviewId int64) error {
	query := fmt.Sprintf("delete from %s where `review_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, reviewId)
	return err
}

func (m *defaultReviewsModel) FindOne(ctx context.Context, reviewId int64) (*Reviews, error) {
	query := fmt.Sprintf("select %s from %s where `review_id` = ? limit 1", reviewsRows, m.table)
	var resp Reviews
	err := m.conn.QueryRowCtx(ctx, &resp, query, reviewId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReviewsModel) Insert(ctx context.Context, data *Reviews) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, reviewsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ReviewId, data.UserId, data.HomestayId, data.Rate, data.Comment)
	return ret, err
}

func (m *defaultReviewsModel) Update(ctx context.Context, data *Reviews) error {
	query := fmt.Sprintf("update %s set %s where `review_id` = ?", m.table, reviewsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.HomestayId, data.Rate, data.Comment, data.ReviewId)
	return err
}

func (m *defaultReviewsModel) tableName() string {
	return m.table
}
