// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roomsFieldNames          = builder.RawFieldNames(&Rooms{})
	roomsRows                = strings.Join(roomsFieldNames, ",")
	roomsRowsExpectAutoSet   = strings.Join(stringx.Remove(roomsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roomsRowsWithPlaceHolder = strings.Join(stringx.Remove(roomsFieldNames, "`room_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	roomsModel interface {
		Insert(ctx context.Context, data *Rooms) (sql.Result, error)
		FindOne(ctx context.Context, roomId int64) (*Rooms, error)
		Update(ctx context.Context, data *Rooms) error
		Delete(ctx context.Context, roomId int64) error
	}

	defaultRoomsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Rooms struct {
		RoomId     int64   `db:"room_id"`
		HomestayId int64   `db:"homestay_id"`
		RoomName   string  `db:"room_name"`
		RoomType   int64   `db:"room_type"` // 1: single, 2: double
		Price      float64 `db:"price"`
		Status     int64   `db:"status"` // 0: con trong, 1: da duoc dat
		CreatedAt  int64   `db:"created_at"`
		UpdatedAt  int64   `db:"updated_at"`
	}
)

func newRoomsModel(conn sqlx.SqlConn) *defaultRoomsModel {
	return &defaultRoomsModel{
		conn:  conn,
		table: "`rooms`",
	}
}

func (m *defaultRoomsModel) withSession(session sqlx.Session) *defaultRoomsModel {
	return &defaultRoomsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`rooms`",
	}
}

func (m *defaultRoomsModel) Delete(ctx context.Context, roomId int64) error {
	query := fmt.Sprintf("delete from %s where `room_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, roomId)
	return err
}

func (m *defaultRoomsModel) FindOne(ctx context.Context, roomId int64) (*Rooms, error) {
	query := fmt.Sprintf("select %s from %s where `room_id` = ? limit 1", roomsRows, m.table)
	var resp Rooms
	err := m.conn.QueryRowCtx(ctx, &resp, query, roomId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoomsModel) Insert(ctx context.Context, data *Rooms) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, roomsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoomId, data.HomestayId, data.RoomName, data.RoomType, data.Price, data.Status)
	return ret, err
}

func (m *defaultRoomsModel) Update(ctx context.Context, data *Rooms) error {
	query := fmt.Sprintf("update %s set %s where `room_id` = ?", m.table, roomsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.HomestayId, data.RoomName, data.RoomType, data.Price, data.Status, data.RoomId)
	return err
}

func (m *defaultRoomsModel) tableName() string {
	return m.table
}
