// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	photosFieldNames          = builder.RawFieldNames(&Photos{})
	photosRows                = strings.Join(photosFieldNames, ",")
	photosRowsExpectAutoSet   = strings.Join(stringx.Remove(photosFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	photosRowsWithPlaceHolder = strings.Join(stringx.Remove(photosFieldNames, "`photo_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	photosModel interface {
		Insert(ctx context.Context, data *Photos) (sql.Result, error)
		FindOne(ctx context.Context, photoId int64) (*Photos, error)
		Update(ctx context.Context, data *Photos) error
		Delete(ctx context.Context, photoId int64) error
	}

	defaultPhotosModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Photos struct {
		PhotoId    int64  `db:"photo_id"`
		EntityId   int64  `db:"entity_id"` // id of room or homestay
		Url        string `db:"url"`
		EntityType int64  `db:"entity_type"` // 2: ENTITY_TYPE_ROOM, 3: ENTITY_TYPE_HOMESTAY
		CreatedAt  int64  `db:"created_at"`
		UpdatedAt  int64  `db:"updated_at"`
	}
)

func newPhotosModel(conn sqlx.SqlConn) *defaultPhotosModel {
	return &defaultPhotosModel{
		conn:  conn,
		table: "`photos`",
	}
}

func (m *defaultPhotosModel) withSession(session sqlx.Session) *defaultPhotosModel {
	return &defaultPhotosModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`photos`",
	}
}

func (m *defaultPhotosModel) Delete(ctx context.Context, photoId int64) error {
	query := fmt.Sprintf("delete from %s where `photo_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, photoId)
	return err
}

func (m *defaultPhotosModel) FindOne(ctx context.Context, photoId int64) (*Photos, error) {
	query := fmt.Sprintf("select %s from %s where `photo_id` = ? limit 1", photosRows, m.table)
	var resp Photos
	err := m.conn.QueryRowCtx(ctx, &resp, query, photoId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPhotosModel) Insert(ctx context.Context, data *Photos) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, photosRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PhotoId, data.EntityId, data.Url, data.EntityType)
	return ret, err
}

func (m *defaultPhotosModel) Update(ctx context.Context, data *Photos) error {
	query := fmt.Sprintf("update %s set %s where `photo_id` = ?", m.table, photosRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.EntityId, data.Url, data.EntityType, data.PhotoId)
	return err
}

func (m *defaultPhotosModel) tableName() string {
	return m.table
}
